generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  emailVerified DateTime?
  hashedPassword String?
  name          String?
  image         String?
  wishlists     Wishlist[]
  createdAt     DateTime   @default(now())
  Account       Account[]
  Session       Session[]
}

model Wishlist {
  id        String         @id @default(cuid())
  name      String
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  isActive  Boolean        @default(false)
  items     WishlistItem[]
  createdAt DateTime       @default(now())
}

model WishlistItem {
  id         String   @id @default(cuid())
  name       String
  link       String?
  price      Float?    // ✅ optional
  notes      String?   // ✅ optional
  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
