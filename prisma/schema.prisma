generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(cuid())
  email          String     @unique
  emailVerified  DateTime?
  hashedPassword String?
  name           String?
  image          String?
  wishlists      Wishlist[]
  createdAt      DateTime   @default(now())
  Account        Account[]
  Session        Session[]

  memberships GiftExchangeMember[]
  Invite      Invite[]
}

model Wishlist {
  id        String         @id @default(cuid())
  name      String
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  isActive  Boolean        @default(false)
  items     WishlistItem[]
  createdAt DateTime       @default(now())

  @@unique([userId, name])
}

model WishlistItem {
  id         String   @id @default(cuid())
  name       String
  link       String?
  price      Float?
  notes      String?
  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GiftExchange {
  id          String    @id @default(uuid())
  name        String
  description String?
  maxSpend    Float?
  date        DateTime?
  time        String? // e.g. "6:00 PM"
  address     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members GiftExchangeMember[]
  invites  Invite[]
}

enum Role {
  MEMBER
  ADMIN
}

model GiftExchangeMember {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  giftExchange   GiftExchange @relation(fields: [giftExchangeId], references: [id], onDelete: Cascade)
  giftExchangeId String

  role Role @default(MEMBER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, giftExchangeId]) // prevent duplicate memberships
}

model Invite {
  id         String       @id @default(cuid())
  token      String       @unique
  email      String
  exchange   GiftExchange @relation(fields: [exchangeId], references: [id], onDelete: Cascade)
  exchangeId String
  user       User?        @relation(fields: [userId], references: [id])
  userId     String?
  status     InviteStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  acceptedAt DateTime?

  @@unique([email, exchangeId]) // âœ… Prevent duplicate invites to same exchange
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}
